{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///PostRPC.Server.min.js","webpack:///webpack/bootstrap 7692c53d29ecd6e10d7b?cfd7","webpack:///./src/server.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","jsonrpc","parseErrorCode","parseErrorMessage","parseErrorData","invalidRequestCode","invalidRequestMessage","invalidRequestData","methodNotFoundCode","methodNotFoundMessage","methodNotFoundData","invalidParamsCode","invalidParamsMessage","invalidParamsData","internalErrorCode","internalErrorMessage","internalErrorData","PostRPCServer","origin","_name","_origin","_registered","_logging","method","params","ret","func","log","JSON","stringify","return","function","request","lastIndexOf","error","code","message","data","result","name","event","messages","window","frames","frame","postMessage","push","_this","addEventListener","messageHandler","_this2","removeEventListener","isValid","isMethodFound","values","source","success","methodNotFoundResponse","invalidRequestResponse","enabled","color","arguments","undefined","console","group","groupEnd","get","default"],"mappings":"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","file":"PostRPC.Server.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Server\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Server\"] = factory();\n\telse\n\t\troot[\"PostRPC\"] = root[\"PostRPC\"] || {}, root[\"PostRPC\"][\"Server\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Server\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Server\"] = factory();\n\telse\n\t\troot[\"PostRPC\"] = root[\"PostRPC\"] || {}, root[\"PostRPC\"][\"Server\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * PostRPC Server\n\t *\n\t * Implements JSON RPC v2 protocol over window.postMessage transport\n\t * providing sandboxed iFrames a secure/restricted communication\n\t * mechanism.\n\t *\n\t * In addition to responding to registered RCP's, the server can\n\t * publish notifications to clients.\n\t *\n\t * Usage:\n\t *\n\t * Load PostRPC.Server library into parent window and create a server\n\t * instance.  Register the set of methods the server will respond to\n\t * and then start the server:\n\t *\n\t *\t\tvar server = new window.PostRPC.Server('http://localhost:5001');\n\t *\n\t *\t\tserver.register('add', {a: 'Number', b: 'Number'}, 'Number', add);\n\t *\t\tserver.register('multiply', {a: 'Number', b: 'Number'}, 'Number', multiply);\n\t *\n\t *\t\tserver.start();\n\t *\n\t * Notifications can be published any time afterwards as:\n\t *\n\t *\t\tserver.publish('something', {stuff: 'Of interest if anyone cares'});\n\t *\n\t */\n\t\n\tvar jsonrpc = '2.0';\n\t\n\tvar parseErrorCode = -32700,\n\t    parseErrorMessage = 'Parse error',\n\t    parseErrorData = 'Invalid JSON was received by the server.';\n\t\n\tvar invalidRequestCode = -32600,\n\t    invalidRequestMessage = 'Invalid request',\n\t    invalidRequestData = 'The JSON sent is not a valid request object.';\n\t\n\tvar methodNotFoundCode = -32601,\n\t    methodNotFoundMessage = 'Method not found',\n\t    methodNotFoundData = 'The method does not exist / is not available.';\n\t\n\tvar invalidParamsCode = -32602,\n\t    invalidParamsMessage = 'Invalid params',\n\t    invalidParamsData = 'Invalid method parameter(s).';\n\t\n\tvar internalErrorCode = -32603,\n\t    internalErrorMessage = 'Internal error',\n\t    internalErrorData = 'Internal JSON-RPC error.';\n\t\n\tvar PostRPCServer = function () {\n\t\n\t\t/**\n\t  * Construct server instance\n\t  * @param {String} origin  origin uri expected from client\n\t  * @return {PostRPCServer} instance\n\t  */\n\t\tfunction PostRPCServer(origin) {\n\t\t\t_classCallCheck(this, PostRPCServer);\n\t\n\t\t\tthis._name = 'PostRPC.Server';\n\t\t\tthis._origin = origin;\n\t\t\tthis._registered = {};\n\t\t\tthis._logging = false;\n\t\t}\n\t\n\t\t/**\n\t  * Get server class name\n\t  * @return {string} class name\n\t  */\n\t\n\t\n\t\t_createClass(PostRPCServer, [{\n\t\t\tkey: 'register',\n\t\n\t\n\t\t\t/**\n\t   * Register RPC method\n\t   * @param {String} method\n\t   * @param {Object|Array[string]} param signature of method\n\t   * @param {Type} ret signature of return\n\t   * @param {Function} func function to perform call\n\t   * @return {Undefined}\n\t  */\n\t\t\tvalue: function register(method, params, ret, func) {\n\t\t\t\tthis.log(['register', 'method: ' + method, 'params: ' + JSON.stringify(params), 'ret: ' + JSON.stringify(ret), 'function: function() {}']);\n\t\t\t\tthis._registered[method] = {\n\t\t\t\t\tparams: params,\n\t\t\t\t\treturn: ret,\n\t\t\t\t\tfunction: func\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Unregister RPC method\n\t   * @param {String} method\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'unregister',\n\t\t\tvalue: function unregister(method) {\n\t\t\t\tdelete this._registered[method];\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Is a valid (JSON-RPC v2) request?\n\t   * @param {Object} request\n\t   * @return {Boolean}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'isValid',\n\t\t\tvalue: function isValid(request) {\n\t\t\t\tif (!(request.jsonrpc === jsonrpc) || !request.method || !('method' in request) || request.method && request.method.lastIndexOf('rpc.', 0) === 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Is method found (registered RPC)?\n\t   * @param {Object} request\n\t   * @return {Boolean}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'isMethodFound',\n\t\t\tvalue: function isMethodFound(request) {\n\t\t\t\tif (request.method in this._registered) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 parse error response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'parseErrorResponse',\n\t\t\tvalue: function parseErrorResponse() {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: parseErrorCode,\n\t\t\t\t\t\tmessage: parseErrorMessage,\n\t\t\t\t\t\tdata: parseErrorData\n\t\t\t\t\t},\n\t\t\t\t\tid: null\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 invalid request response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'invalidRequestResponse',\n\t\t\tvalue: function invalidRequestResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: invalidRequestCode,\n\t\t\t\t\t\tmessage: invalidRequestMessage,\n\t\t\t\t\t\tdata: invalidRequestData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 method not found response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'methodNotFoundResponse',\n\t\t\tvalue: function methodNotFoundResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: methodNotFoundCode,\n\t\t\t\t\t\tmessage: methodNotFoundMessage,\n\t\t\t\t\t\tdata: methodNotFoundData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 invalid params response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'invalidParamsResponse',\n\t\t\tvalue: function invalidParamsResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: invalidParamsCode,\n\t\t\t\t\t\tmessage: invalidParamsMessage,\n\t\t\t\t\t\tdata: invalidParamsData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 internal error response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'internalErrorResponse',\n\t\t\tvalue: function internalErrorResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: internalErrorCode,\n\t\t\t\t\t\tmessage: internalErrorMessage,\n\t\t\t\t\t\tdata: internalErrorData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 success response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'success',\n\t\t\tvalue: function success(result, id) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\tresult: result,\n\t\t\t\t\tid: id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 failure response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'failure',\n\t\t\tvalue: function failure(error, id) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: error,\n\t\t\t\t\tid: id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2+ event notification response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'event',\n\t\t\tvalue: function event(result, name) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\tresult: result,\n\t\t\t\t\tevent: name,\n\t\t\t\t\tid: null\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Publish event notification to all child iFrame windows\n\t   * @param {String} name of event\n\t   * @param {Object} result\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'publish',\n\t\t\tvalue: function publish(name, result) {\n\t\t\t\tvar messages = ['publish: name: ' + name + ', result: ' + JSON.stringify(result)];\n\t\n\t\t\t\tfor (var i = 0; i < window.frames.length; i++) {\n\t\t\t\t\tvar frame = window.frames[i];\n\t\n\t\t\t\t\tframe.postMessage(this.event(result, name), '*');\n\t\t\t\t}\n\t\t\t\tmessages.push('(' + window.frames.length + ') post publish');\n\t\t\t\tthis.log(messages);\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Start the server (add postMessage event listener)\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'start',\n\t\t\tvalue: function start() {\n\t\t\t\tvar _this = this;\n\t\n\t\t\t\twindow.addEventListener('message', function (event) {\n\t\t\t\t\treturn _this.messageHandler(event);\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Stop the server (remove postMessage event listener)\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'stop',\n\t\t\tvalue: function stop() {\n\t\t\t\tvar _this2 = this;\n\t\n\t\t\t\twindow.removeEventListener('message', function (event) {\n\t\t\t\t\treturn _this2.messageHandler(event);\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Handle postMessage events for parent window\n\t   * @param {Object} event\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'messageHandler',\n\t\t\tvalue: function messageHandler(event) {\n\t\t\t\t// this.log([\n\t\t\t\t// \t'event origin' + event.origin,\n\t\t\t\t// \t'event data' + event.data,\n\t\t\t\t// \t'event source' + event.source,\n\t\t\t\t// \t'this origin' + this._origin\n\t\t\t\t// ]);\n\t\n\t\t\t\t// if (!event.origin || event.origin === this._origin) {\n\t\t\t\tvar request = event.data;\n\t\t\t\tvar messages = ['request: ' + JSON.stringify(request)];\n\t\n\t\t\t\tif (!this.isValid(request)) {\n\t\n\t\t\t\t\tmessages.push('post invalid');\n\t\t\t\t\tevent.source.postMessage(this.invalidRequestResponse(request), '*');\n\t\t\t\t} else if (!this.isMethodFound(request)) {\n\t\n\t\t\t\t\tmessages.push('post method not found');\n\t\t\t\t\tevent.source.postMessage(this.methodNotFoundResponse(request), '*');\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar func = this._registered[request.method].function;\n\t\t\t\t\tvar result = null;\n\t\t\t\t\tif (Array.isArray(request.params)) {\n\t\t\t\t\t\tresult = func.apply(undefined, _toConsumableArray(request.params));\n\t\t\t\t\t} else if (request.params !== null && _typeof(request.params) === 'object') {\n\t\t\t\t\t\tresult = func.apply(undefined, _toConsumableArray(Object.values(request.params)));\n\t\t\t\t\t}\n\t\t\t\t\tmessages.push('post success');\n\t\t\t\t\tevent.source.postMessage(this.success(result, request.id), '*');\n\t\t\t\t}\n\t\t\t\t// }\n\t\t\t\tthis.log(messages);\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Enable/Disable console logging\n\t   * @param {String} event\n\t   * @param {Function} callback function to notify\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'logging',\n\t\t\tvalue: function logging(enabled) {\n\t\t\t\tthis._logging = enabled;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Log messages to console\n\t   * @param {Array[String]} messages\n\t   * @param {String} color\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'log',\n\t\t\tvalue: function log(messages) {\n\t\t\t\tvar color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'blue';\n\t\n\t\t\t\tif (this._logging) {\n\t\t\t\t\tconsole.group(this._name);\n\t\t\t\t\tfor (var i = 0; i < messages.length; i++) {\n\t\t\t\t\t\tconsole.log('%c%s', 'color:' + color, messages[i]);\n\t\t\t\t\t}\n\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'name',\n\t\t\tget: function get() {\n\t\t\t\treturn this._name;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Get origin uri expected from client\n\t   * @return {string} class name\n\t   */\n\t\n\t\t}, {\n\t\t\tkey: 'origin',\n\t\t\tget: function get() {\n\t\t\t\treturn this._origin;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Get list of registered RPC's\n\t   * @return {Array[Object]} rpcs\n\t   */\n\t\n\t\t}, {\n\t\t\tkey: 'registered',\n\t\t\tget: function get() {\n\t\t\t\treturn this._registered;\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn PostRPCServer;\n\t}();\n\t\n\texports.default = PostRPCServer;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// PostRPC.Server.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7692c53d29ecd6e10d7b","/**\n * PostRPC Server\n *\n * Implements JSON RPC v2 protocol over window.postMessage transport\n * providing sandboxed iFrames a secure/restricted communication\n * mechanism.\n *\n * In addition to responding to registered RCP's, the server can\n * publish notifications to clients.\n *\n * Usage:\n *\n * Load PostRPC.Server library into parent window and create a server\n * instance.  Register the set of methods the server will respond to\n * and then start the server:\n *\n *\t\tvar server = new window.PostRPC.Server('http://localhost:5001');\n *\n *\t\tserver.register('add', {a: 'Number', b: 'Number'}, 'Number', add);\n *\t\tserver.register('multiply', {a: 'Number', b: 'Number'}, 'Number', multiply);\n *\n *\t\tserver.start();\n *\n * Notifications can be published any time afterwards as:\n *\n *\t\tserver.publish('something', {stuff: 'Of interest if anyone cares'});\n *\n */\n\nconst jsonrpc = '2.0';\n\nconst parseErrorCode = -32700,\n\t  parseErrorMessage = 'Parse error',\n\t  parseErrorData = 'Invalid JSON was received by the server.';\n\nconst invalidRequestCode = -32600,\n\t  invalidRequestMessage = 'Invalid request',\n\t  invalidRequestData = 'The JSON sent is not a valid request object.';\n\nconst methodNotFoundCode = -32601,\n\t  methodNotFoundMessage = 'Method not found',\n\t  methodNotFoundData = 'The method does not exist / is not available.';\n\nconst invalidParamsCode = -32602,\n\t  invalidParamsMessage = 'Invalid params',\n\t  invalidParamsData = 'Invalid method parameter(s).';\n\nconst internalErrorCode = -32603,\n\t  internalErrorMessage = 'Internal error',\n\t  internalErrorData = 'Internal JSON-RPC error.';\n\nexport default class PostRPCServer {\n\n\t/**\n\t * Construct server instance\n\t * @param {String} origin  origin uri expected from client\n\t * @return {PostRPCServer} instance\n\t */\n\tconstructor(origin) {\n\t\tthis._name = 'PostRPC.Server';\n\t\tthis._origin = origin;\n\t\tthis._registered = {};\n\t\tthis._logging = false;\n\t}\n\n\t/**\n\t * Get server class name\n\t * @return {string} class name\n\t */\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\t/**\n\t * Get origin uri expected from client\n\t * @return {string} class name\n\t */\n\tget origin() {\n\t\treturn this._origin;\n\t}\n\n\t/**\n\t * Get list of registered RPC's\n\t * @return {Array[Object]} rpcs\n\t */\n\tget registered() {\n\t\treturn this._registered;\n\t}\n\n\t/**\n\t * Register RPC method\n\t * @param {String} method\n\t * @param {Object|Array[string]} param signature of method\n\t * @param {Type} ret signature of return\n\t * @param {Function} func function to perform call\n\t * @return {Undefined}\n\t*/\n\tregister(method, params, ret, func) {\n\t\tthis.log([\n\t\t\t'register',\n\t\t\t'method: ' + method,\n\t\t\t'params: ' + JSON.stringify(params),\n\t\t\t'ret: ' + JSON.stringify(ret),\n\t\t\t'function: function() {}'\n\t\t]);\n\t\tthis._registered[method] = {\n\t\t\tparams: params,\n\t\t\treturn: ret,\n\t\t\tfunction: func\n\t\t};\n\t}\n\n\t/**\n\t * Unregister RPC method\n\t * @param {String} method\n\t * @return {Undefined}\n\t*/\n\tunregister(method) {\n\t\tdelete this._registered[method];\n\t}\n\n\t/**\n\t * Is a valid (JSON-RPC v2) request?\n\t * @param {Object} request\n\t * @return {Boolean}\n\t*/\n\tisValid(request) {\n\t\tif (\n\t\t\t!(request.jsonrpc === jsonrpc) ||\n\t\t\t!(request.method) ||\n\t\t\t!('method' in request) ||\n\t\t\t(request.method && request.method.lastIndexOf('rpc.', 0) === 0)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Is method found (registered RPC)?\n\t * @param {Object} request\n\t * @return {Boolean}\n\t*/\n\tisMethodFound(request) {\n\t\tif (request.method in this._registered) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * JSON-RPC v2 parse error response\n\t * @return {Object} response\n\t*/\n\tparseErrorResponse() {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: parseErrorCode,\n\t\t\t\tmessage: parseErrorMessage,\n\t\t\t\tdata: parseErrorData\n\t\t\t},\n\t\t\tid: null\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 invalid request response\n\t * @return {Object} response\n\t*/\n\tinvalidRequestResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: invalidRequestCode,\n\t\t\t\tmessage: invalidRequestMessage,\n\t\t\t\tdata: invalidRequestData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 method not found response\n\t * @return {Object} response\n\t*/\n\tmethodNotFoundResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: methodNotFoundCode,\n\t\t\t\tmessage: methodNotFoundMessage,\n\t\t\t\tdata: methodNotFoundData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 invalid params response\n\t * @return {Object} response\n\t*/\n\tinvalidParamsResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: invalidParamsCode,\n\t\t\t\tmessage: invalidParamsMessage,\n\t\t\t\tdata: invalidParamsData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 internal error response\n\t * @return {Object} response\n\t*/\n\tinternalErrorResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: internalErrorCode,\n\t\t\t\tmessage: internalErrorMessage,\n\t\t\t\tdata: internalErrorData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 success response\n\t * @return {Object} response\n\t*/\n\tsuccess(result, id) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\tresult: result,\n\t\t\tid: id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 failure response\n\t * @return {Object} response\n\t*/\n\tfailure(error, id) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: error,\n\t\t\tid: id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2+ event notification response\n\t * @return {Object} response\n\t*/\n\tevent(result, name) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\tresult: result,\n\t\t\tevent: name,\n\t\t\tid: null\n\t\t};\n\t}\n\n\t/**\n\t * Publish event notification to all child iFrame windows\n\t * @param {String} name of event\n\t * @param {Object} result\n\t * @return {Undefined}\n\t*/\n\tpublish(name, result) {\n\t\tvar messages = ['publish: name: ' + name + ', result: ' + JSON.stringify(result)];\n\n\t\tfor (var i = 0; i < window.frames.length; i++) {\n\t\t\tvar frame = window.frames[i];\n\n\t\t\tframe.postMessage(this.event(result, name), '*');\n\t\t}\n\t\tmessages.push('(' + window.frames.length + ') post publish');\n\t\tthis.log(messages);\n\t}\n\n\t/**\n\t * Start the server (add postMessage event listener)\n\t * @return {Undefined}\n\t*/\n\tstart() {\n\t\twindow.addEventListener('message', (event) => this.messageHandler(event));\n\t}\n\n\t/**\n\t * Stop the server (remove postMessage event listener)\n\t * @return {Undefined}\n\t*/\n\tstop() {\n\t\twindow.removeEventListener('message', (event) => this.messageHandler(event));\n\t}\n\n\t/**\n\t * Handle postMessage events for parent window\n\t * @param {Object} event\n\t * @return {Undefined}\n\t*/\n\tmessageHandler(event) {\n\t\t// this.log([\n\t\t// \t'event origin' + event.origin,\n\t\t// \t'event data' + event.data,\n\t\t// \t'event source' + event.source,\n\t\t// \t'this origin' + this._origin\n\t\t// ]);\n\n\t\t// if (!event.origin || event.origin === this._origin) {\n\t\t\tvar request = event.data;\n\t\t\tvar messages = ['request: ' + JSON.stringify(request)];\n\n\t\t\tif (!this.isValid(request)) {\n\n\t\t\t\tmessages.push('post invalid');\n\t\t\t\tevent.source.postMessage(this.invalidRequestResponse(request), '*');\n\n\t\t\t} else if (!this.isMethodFound(request)) {\n\n\t\t\t\tmessages.push('post method not found');\n\t\t\t\tevent.source.postMessage(this.methodNotFoundResponse(request), '*');\n\n\t\t\t} else {\n\n\t\t\t\tvar func = this._registered[request.method].function;\n\t\t\t\tvar result = null;\n\t\t\t\tif (Array.isArray(request.params)) {\n\t\t\t\t\tresult = func(...request.params);\n\t\t\t\t} else if (request.params !== null && typeof request.params === 'object') {\n\t\t\t\t\tresult = func(...(Object.values(request.params)));\n\t\t\t\t}\n\t\t\t\tmessages.push('post success');\n\t\t\t\tevent.source.postMessage(this.success(result, request.id), '*');\n\n\t\t\t}\n\t\t// }\n\t\tthis.log(messages);\n\n\t}\n\n\t/**\n\t * Enable/Disable console logging\n\t * @param {String} event\n\t * @param {Function} callback function to notify\n\t * @return {Undefined}\n\t*/\n\tlogging(enabled) {\n\t\tthis._logging = enabled;\n\t}\n\n\t/**\n\t * Log messages to console\n\t * @param {Array[String]} messages\n\t * @param {String} color\n\t * @return {Undefined}\n\t*/\n\tlog(messages, color = 'blue') {\n\t\tif (this._logging) {\n\t\t\tconsole.group(this._name);\n\t\t\tfor (var i = 0; i < messages.length; i++) {\n\t\t\t\tconsole.log('%c%s', 'color:' + color, messages[i]);\n\t\t\t}\n\t\t\tconsole.groupEnd();\n\t\t}\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/server.js"],"sourceRoot":""}