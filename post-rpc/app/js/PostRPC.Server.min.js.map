{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///PostRPC.Server.min.js","webpack:///webpack/bootstrap 83f56868056b070ead09?1c69","webpack:///./src/server.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","jsonrpc","parseErrorCode","parseErrorMessage","parseErrorData","invalidRequestCode","invalidRequestMessage","invalidRequestData","methodNotFoundCode","methodNotFoundMessage","methodNotFoundData","invalidParamsCode","invalidParamsMessage","invalidParamsData","internalErrorCode","internalErrorMessage","internalErrorData","errorCode","PostRPCServer","origin","_name","_origin","_registered","_logging","method","params","ret","func","desc","log","JSON","stringify","return","function","description","request","lastIndexOf","error","code","message","data","result","name","event","messages","window","frames","frame","postMessage","push","_this","addEventListener","messageHandler","_this2","removeEventListener","given","required","isValid","isMethodFound","rpc","args","mapParams","source","invalidParamsResponse","join","success","err","failure","methodNotFoundResponse","invalidRequestResponse","enabled","color","arguments","undefined","console","group","groupEnd","self","keys","map","sorted","sort","a","b","r","params2","types","Boolean","Null","Undefined","Number","String","j","groupCollapsed","k","get","default"],"mappings":"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","file":"PostRPC.Server.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Server\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Server\"] = factory();\n\telse\n\t\troot[\"PostRPC\"] = root[\"PostRPC\"] || {}, root[\"PostRPC\"][\"Server\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Server\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Server\"] = factory();\n\telse\n\t\troot[\"PostRPC\"] = root[\"PostRPC\"] || {}, root[\"PostRPC\"][\"Server\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * PostRPC Server\n\t *\n\t * Implements JSON RPC v2 protocol over window.postMessage transport\n\t * providing sandboxed iFrames a secure/restricted communication\n\t * mechanism.\n\t *\n\t * In addition to responding to registered RCP's, the server can\n\t * publish notifications to clients.\n\t *\n\t * Usage:\n\t *\n\t * Load PostRPC.Server library into parent window and create a server\n\t * instance.  Register the set of methods the server will respond to\n\t * and then start the server:\n\t *\n\t *\t\tvar server = new window.PostRPC.Server('http://localhost:5001');\n\t *\n\t *\t\tserver.register('add', {a: 'Number', b: 'Number'}, 'Number', add);\n\t *\t\tserver.register('multiply', {a: 'Number', b: 'Number'}, 'Number', multiply);\n\t *\n\t *\t\tserver.start();\n\t *\n\t * Notifications can be published any time afterwards as:\n\t *\n\t *\t\tserver.publish('something', {stuff: 'Of interest if anyone cares'});\n\t *\n\t */\n\t\n\tvar jsonrpc = '2.0';\n\t\n\tvar parseErrorCode = -32700,\n\t    parseErrorMessage = 'Parse error',\n\t    parseErrorData = 'Invalid JSON was received by the server.';\n\t\n\tvar invalidRequestCode = -32600,\n\t    invalidRequestMessage = 'Invalid request',\n\t    invalidRequestData = 'The JSON sent is not a valid request object.';\n\t\n\tvar methodNotFoundCode = -32601,\n\t    methodNotFoundMessage = 'Method not found',\n\t    methodNotFoundData = 'The method does not exist / is not available.';\n\t\n\tvar invalidParamsCode = -32602,\n\t    invalidParamsMessage = 'Invalid params',\n\t    invalidParamsData = 'Invalid method parameter(s).';\n\t\n\tvar internalErrorCode = -32603,\n\t    internalErrorMessage = 'Internal error',\n\t    internalErrorData = 'Internal JSON-RPC error.';\n\t\n\tvar errorCode = -32000;\n\t\n\tvar PostRPCServer = function () {\n\t\n\t\t/**\n\t  * Construct server instance\n\t  * @param {String} origin  origin uri expected from client\n\t  * @return {PostRPCServer} instance\n\t  */\n\t\tfunction PostRPCServer(origin) {\n\t\t\t_classCallCheck(this, PostRPCServer);\n\t\n\t\t\tthis._name = 'PostRPC.Server';\n\t\t\tthis._origin = origin;\n\t\t\tthis._registered = {};\n\t\t\tthis._logging = false;\n\t\t}\n\t\n\t\t/**\n\t  * Get server class name\n\t  * @return {string} class name\n\t  */\n\t\n\t\n\t\t_createClass(PostRPCServer, [{\n\t\t\tkey: 'register',\n\t\n\t\n\t\t\t/**\n\t   * Register RPC method\n\t   * @param {String} method\n\t   * @param {Object|Array[string]} param signature of method\n\t   * @param {Type} ret signature of return\n\t   * @param {Function} func function to perform call\n\t   * @return {Undefined}\n\t  */\n\t\t\tvalue: function register(method, params, ret, func, desc) {\n\t\t\t\tthis.log(['register', 'method: ' + method, 'params: ' + JSON.stringify(params), 'return: ' + JSON.stringify(ret), 'function: function() {}', 'description: ' + desc]);\n\t\t\t\tthis._registered[method] = {\n\t\t\t\t\tparams: params,\n\t\t\t\t\treturn: ret,\n\t\t\t\t\tfunction: func,\n\t\t\t\t\tdescription: desc\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Unregister RPC method\n\t   * @param {String} method\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'unregister',\n\t\t\tvalue: function unregister(method) {\n\t\t\t\tdelete this._registered[method];\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Is a valid (JSON-RPC v2) request?\n\t   * @param {Object} request\n\t   * @return {Boolean}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'isValid',\n\t\t\tvalue: function isValid(request) {\n\t\t\t\tif (!(request.jsonrpc === jsonrpc) || !request.method || !('method' in request) || request.method && request.method.lastIndexOf('rpc.', 0) === 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Is method found (registered RPC)?\n\t   * @param {Object} request\n\t   * @return {Boolean}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'isMethodFound',\n\t\t\tvalue: function isMethodFound(request) {\n\t\t\t\tif (request.method in this._registered) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 parse error response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'parseErrorResponse',\n\t\t\tvalue: function parseErrorResponse() {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: parseErrorCode,\n\t\t\t\t\t\tmessage: parseErrorMessage,\n\t\t\t\t\t\tdata: parseErrorData\n\t\t\t\t\t},\n\t\t\t\t\tid: null\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 invalid request response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'invalidRequestResponse',\n\t\t\tvalue: function invalidRequestResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: invalidRequestCode,\n\t\t\t\t\t\tmessage: invalidRequestMessage,\n\t\t\t\t\t\tdata: invalidRequestData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 method not found response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'methodNotFoundResponse',\n\t\t\tvalue: function methodNotFoundResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: methodNotFoundCode,\n\t\t\t\t\t\tmessage: methodNotFoundMessage,\n\t\t\t\t\t\tdata: methodNotFoundData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 invalid params response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'invalidParamsResponse',\n\t\t\tvalue: function invalidParamsResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: invalidParamsCode,\n\t\t\t\t\t\tmessage: invalidParamsMessage,\n\t\t\t\t\t\tdata: invalidParamsData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 internal error response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'internalErrorResponse',\n\t\t\tvalue: function internalErrorResponse(request) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: internalErrorCode,\n\t\t\t\t\t\tmessage: internalErrorMessage,\n\t\t\t\t\t\tdata: internalErrorData\n\t\t\t\t\t},\n\t\t\t\t\tid: request.id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 success response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'success',\n\t\t\tvalue: function success(result, id) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\tresult: result,\n\t\t\t\t\tid: id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2 failure response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'failure',\n\t\t\tvalue: function failure(code, message, data, id) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: code,\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\tdata: data\n\t\t\t\t\t},\n\t\t\t\t\tid: id\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * JSON-RPC v2+ event notification response\n\t   * @return {Object} response\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'event',\n\t\t\tvalue: function event(result, name) {\n\t\t\t\treturn {\n\t\t\t\t\tjsonrpc: jsonrpc,\n\t\t\t\t\tresult: result,\n\t\t\t\t\tevent: name,\n\t\t\t\t\tid: null\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Publish event notification to all child iFrame windows\n\t   * @param {String} name of event\n\t   * @param {Object} result\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'publish',\n\t\t\tvalue: function publish(name, result) {\n\t\t\t\tvar messages = ['publish: name: ' + name + ', result: ' + JSON.stringify(result)];\n\t\n\t\t\t\tfor (var i = 0; i < window.frames.length; i++) {\n\t\t\t\t\tvar frame = window.frames[i];\n\t\n\t\t\t\t\tframe.postMessage(this.event(result, name), '*');\n\t\t\t\t}\n\t\t\t\tmessages.push('(' + window.frames.length + ') post publish');\n\t\t\t\tthis.log(messages);\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Start the server (add postMessage event listener)\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'start',\n\t\t\tvalue: function start() {\n\t\t\t\tvar _this = this;\n\t\n\t\t\t\twindow.addEventListener('message', function (event) {\n\t\t\t\t\treturn _this.messageHandler(event);\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Stop the server (remove postMessage event listener)\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'stop',\n\t\t\tvalue: function stop() {\n\t\t\t\tvar _this2 = this;\n\t\n\t\t\t\twindow.removeEventListener('message', function (event) {\n\t\t\t\t\treturn _this2.messageHandler(event);\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Map given parameters according to required\n\t   * @param {Object|Array} given\n\t   * @param {Array[Array]} required\n\t   * @return {Array} params\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'mapParams',\n\t\t\tvalue: function mapParams(given, required) {\n\t\t\t\tvar params = [];\n\t\t\t\tfor (var i = 0; i < required.length; i++) {\n\t\t\t\t\tvar p = required[i];\n\t\t\t\t\tif (Array.isArray(given)) {\n\t\t\t\t\t\tif (i < given.length) {\n\t\t\t\t\t\t\tparams.push(given[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (given !== null && (typeof given === 'undefined' ? 'undefined' : _typeof(given)) === 'object') {\n\t\t\t\t\t\tif (p[0] in given) {\n\t\t\t\t\t\t\tparams.push(given[p[0]]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn params;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Handle postMessage events for parent window\n\t   * @param {Object} event\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'messageHandler',\n\t\t\tvalue: function messageHandler(event) {\n\t\t\t\t// this.log([\n\t\t\t\t// \t'event origin' + event.origin,\n\t\t\t\t// \t'event data' + event.data,\n\t\t\t\t// \t'event source' + event.source,\n\t\t\t\t// \t'this origin' + this._origin\n\t\t\t\t// ]);\n\t\n\t\t\t\t// if (!event.origin || event.origin === this._origin) {\n\t\t\t\tvar request = event.data;\n\t\t\t\tvar messages = ['request: ' + JSON.stringify(request)];\n\t\n\t\t\t\tif (!this.isValid(request)) {\n\t\n\t\t\t\t\tmessages.push('post invalid');\n\t\t\t\t\tevent.source.postMessage(this.invalidRequestResponse(request), '*');\n\t\t\t\t} else if (!this.isMethodFound(request)) {\n\t\n\t\t\t\t\tmessages.push('post method not found');\n\t\t\t\t\tevent.source.postMessage(this.methodNotFoundResponse(request), '*');\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar rpc = this._registered[request.method];\n\t\t\t\t\tvar func = rpc.function;\n\t\t\t\t\tvar args = this.mapParams(request.params, rpc.params);\n\t\t\t\t\tif (args.length !== rpc.params.length) {\n\t\t\t\t\t\tmessages.push('post invalid params');\n\t\t\t\t\t\tevent.source.postMessage(this.invalidParamsResponse(request), '*');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessages.push('call: ' + request.method + '(' + args.join(', ') + ')');\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar result = func.apply(undefined, _toConsumableArray(args));\n\t\t\t\t\t\t\tmessages.push('return: ' + JSON.stringify(result));\n\t\t\t\t\t\t\tmessages.push('post success');\n\t\t\t\t\t\t\tevent.source.postMessage(this.success(result, request.id), '*');\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tmessages.push('error: name: ' + err.name + ', message: ' + err.message);\n\t\t\t\t\t\t\tmessages.push('post failure');\n\t\t\t\t\t\t\tevent.source.postMessage(this.failure(errorCode, err.name, err.message, request.id), '*');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// }\n\t\t\t\tthis.log(messages);\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Enable/Disable console logging\n\t   * @param {String} event\n\t   * @param {Function} callback function to notify\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'logging',\n\t\t\tvalue: function logging(enabled) {\n\t\t\t\tthis._logging = enabled;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Log messages to console\n\t   * @param {Array[String]} messages\n\t   * @param {String} color\n\t   * @return {Undefined}\n\t  */\n\t\n\t\t}, {\n\t\t\tkey: 'log',\n\t\t\tvalue: function log(messages) {\n\t\t\t\tvar color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'blue';\n\t\n\t\t\t\tif (this._logging) {\n\t\t\t\t\tconsole.group(this._name);\n\t\t\t\t\tfor (var i = 0; i < messages.length; i++) {\n\t\t\t\t\t\tconsole.log('%c%s', 'color:' + color, messages[i]);\n\t\t\t\t\t}\n\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Log all registered RPC's\n\t   * @return {Array[Object]} rpcs\n\t   */\n\t\n\t\t}, {\n\t\t\tkey: 'logRegistered',\n\t\t\tvalue: function logRegistered() {\n\t\t\t\tvar color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'blue';\n\t\n\t\t\t\tif (this._logging) {\n\t\t\t\t\tconsole.group(this._name);\n\t\t\t\t\tconsole.group('registered');\n\t\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tvar arr = Object.keys(self._registered).map(function (key) {\n\t\t\t\t\t\treturn [key, self._registered[key]];\n\t\t\t\t\t});\n\t\t\t\t\tvar sorted = arr.sort(function (a, b) {\n\t\t\t\t\t\tif (a[0] < b[0]) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a[0] > b[0]) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\t\tfor (var i = 0; i < sorted.length; i++) {\n\t\n\t\t\t\t\t\tvar messages = [];\n\t\t\t\t\t\tvar method = sorted[i][0];\n\t\t\t\t\t\tvar r = sorted[i][1];\n\t\t\t\t\t\tvar params = [];\n\t\t\t\t\t\tvar params2 = [];\n\t\n\t\t\t\t\t\tmessages.push('/**');\n\t\t\t\t\t\tmessages.push(' * ' + r.description);\n\t\t\t\t\t\tvar types = {\n\t\t\t\t\t\t\t'Boolean': 'true',\n\t\t\t\t\t\t\t'Null': 'null',\n\t\t\t\t\t\t\t'Undefined': 'undefined',\n\t\t\t\t\t\t\t'Number': '1',\n\t\t\t\t\t\t\t'String': 'str',\n\t\t\t\t\t\t\t'Object': '{a: 1}',\n\t\t\t\t\t\t\t'Array': '[1,2]'\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\tfor (var j = 0; j < r.params.length; j++) {\n\t\t\t\t\t\t\tvar p = r.params[j];\n\t\t\t\t\t\t\tmessages.push(' * @param {' + p[1] + '} ' + p[0]);\n\t\t\t\t\t\t\tparams.push(p[0]);\n\t\t\t\t\t\t\tparams2.push(p[0] + ': ' + types[p[1]]);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tmessages.push(' * @return {' + r.return + '}');\n\t\t\t\t\t\tmessages.push(' */');\n\t\t\t\t\t\tmessages.push(method + '(' + params.join(', ') + ')');\n\t\t\t\t\t\tmessages.push('client.call(\\'' + method + '\\', {' + params2.join(', ') + '}, func)');\n\t\n\t\t\t\t\t\tconsole.groupCollapsed(method);\n\t\t\t\t\t\tfor (var k = 0; k < messages.length; k++) {\n\t\t\t\t\t\t\tconsole.log('%c%s', 'color:' + color, messages[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t\t}\n\t\n\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'name',\n\t\t\tget: function get() {\n\t\t\t\treturn this._name;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Get origin uri expected from client\n\t   * @return {string} class name\n\t   */\n\t\n\t\t}, {\n\t\t\tkey: 'origin',\n\t\t\tget: function get() {\n\t\t\t\treturn this._origin;\n\t\t\t}\n\t\n\t\t\t/**\n\t   * Get list of registered RPC's\n\t   * @return {Array[Object]} rpcs\n\t   */\n\t\n\t\t}, {\n\t\t\tkey: 'registered',\n\t\t\tget: function get() {\n\t\t\t\treturn this._registered;\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn PostRPCServer;\n\t}();\n\t\n\texports.default = PostRPCServer;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// PostRPC.Server.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 83f56868056b070ead09","/**\n * PostRPC Server\n *\n * Implements JSON RPC v2 protocol over window.postMessage transport\n * providing sandboxed iFrames a secure/restricted communication\n * mechanism.\n *\n * In addition to responding to registered RCP's, the server can\n * publish notifications to clients.\n *\n * Usage:\n *\n * Load PostRPC.Server library into parent window and create a server\n * instance.  Register the set of methods the server will respond to\n * and then start the server:\n *\n *\t\tvar server = new window.PostRPC.Server('http://localhost:5001');\n *\n *\t\tserver.register('add', {a: 'Number', b: 'Number'}, 'Number', add);\n *\t\tserver.register('multiply', {a: 'Number', b: 'Number'}, 'Number', multiply);\n *\n *\t\tserver.start();\n *\n * Notifications can be published any time afterwards as:\n *\n *\t\tserver.publish('something', {stuff: 'Of interest if anyone cares'});\n *\n */\n\nconst jsonrpc = '2.0';\n\nconst parseErrorCode = -32700,\n\t  parseErrorMessage = 'Parse error',\n\t  parseErrorData = 'Invalid JSON was received by the server.';\n\nconst invalidRequestCode = -32600,\n\t  invalidRequestMessage = 'Invalid request',\n\t  invalidRequestData = 'The JSON sent is not a valid request object.';\n\nconst methodNotFoundCode = -32601,\n\t  methodNotFoundMessage = 'Method not found',\n\t  methodNotFoundData = 'The method does not exist / is not available.';\n\nconst invalidParamsCode = -32602,\n\t  invalidParamsMessage = 'Invalid params',\n\t  invalidParamsData = 'Invalid method parameter(s).';\n\nconst internalErrorCode = -32603,\n\t  internalErrorMessage = 'Internal error',\n\t  internalErrorData = 'Internal JSON-RPC error.';\n\nconst errorCode = -32000;\n\nexport default class PostRPCServer {\n\n\t/**\n\t * Construct server instance\n\t * @param {String} origin  origin uri expected from client\n\t * @return {PostRPCServer} instance\n\t */\n\tconstructor(origin) {\n\t\tthis._name = 'PostRPC.Server';\n\t\tthis._origin = origin;\n\t\tthis._registered = {};\n\t\tthis._logging = false;\n\t}\n\n\t/**\n\t * Get server class name\n\t * @return {string} class name\n\t */\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\t/**\n\t * Get origin uri expected from client\n\t * @return {string} class name\n\t */\n\tget origin() {\n\t\treturn this._origin;\n\t}\n\n\t/**\n\t * Get list of registered RPC's\n\t * @return {Array[Object]} rpcs\n\t */\n\tget registered() {\n\t\treturn this._registered;\n\t}\n\n\t/**\n\t * Register RPC method\n\t * @param {String} method\n\t * @param {Object|Array[string]} param signature of method\n\t * @param {Type} ret signature of return\n\t * @param {Function} func function to perform call\n\t * @return {Undefined}\n\t*/\n\tregister(method, params, ret, func, desc) {\n\t\tthis.log([\n\t\t\t'register',\n\t\t\t'method: ' + method,\n\t\t\t'params: ' + JSON.stringify(params),\n\t\t\t'return: ' + JSON.stringify(ret),\n\t\t\t'function: function() {}',\n\t\t\t'description: ' + desc\n\n\t\t]);\n\t\tthis._registered[method] = {\n\t\t\tparams: params,\n\t\t\treturn: ret,\n\t\t\tfunction: func,\n\t\t\tdescription: desc\n\t\t};\n\t}\n\n\t/**\n\t * Unregister RPC method\n\t * @param {String} method\n\t * @return {Undefined}\n\t*/\n\tunregister(method) {\n\t\tdelete this._registered[method];\n\t}\n\n\t/**\n\t * Is a valid (JSON-RPC v2) request?\n\t * @param {Object} request\n\t * @return {Boolean}\n\t*/\n\tisValid(request) {\n\t\tif (\n\t\t\t!(request.jsonrpc === jsonrpc) ||\n\t\t\t!(request.method) ||\n\t\t\t!('method' in request) ||\n\t\t\t(request.method && request.method.lastIndexOf('rpc.', 0) === 0)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Is method found (registered RPC)?\n\t * @param {Object} request\n\t * @return {Boolean}\n\t*/\n\tisMethodFound(request) {\n\t\tif (request.method in this._registered) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * JSON-RPC v2 parse error response\n\t * @return {Object} response\n\t*/\n\tparseErrorResponse() {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: parseErrorCode,\n\t\t\t\tmessage: parseErrorMessage,\n\t\t\t\tdata: parseErrorData\n\t\t\t},\n\t\t\tid: null\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 invalid request response\n\t * @return {Object} response\n\t*/\n\tinvalidRequestResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: invalidRequestCode,\n\t\t\t\tmessage: invalidRequestMessage,\n\t\t\t\tdata: invalidRequestData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 method not found response\n\t * @return {Object} response\n\t*/\n\tmethodNotFoundResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: methodNotFoundCode,\n\t\t\t\tmessage: methodNotFoundMessage,\n\t\t\t\tdata: methodNotFoundData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 invalid params response\n\t * @return {Object} response\n\t*/\n\tinvalidParamsResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: invalidParamsCode,\n\t\t\t\tmessage: invalidParamsMessage,\n\t\t\t\tdata: invalidParamsData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 internal error response\n\t * @return {Object} response\n\t*/\n\tinternalErrorResponse(request) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: internalErrorCode,\n\t\t\t\tmessage: internalErrorMessage,\n\t\t\t\tdata: internalErrorData\n\t\t\t},\n\t\t\tid: request.id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 success response\n\t * @return {Object} response\n\t*/\n\tsuccess(result, id) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\tresult: result,\n\t\t\tid: id\n\t\t};\n\t}\n\n\t/**\n\t * JSON-RPC v2 failure response\n\t * @return {Object} response\n\t*/\n\tfailure(code, message, data, id) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\terror: {\n\t\t\t\tcode: code,\n\t\t\t\tmessage: message,\n\t\t\t\tdata: data\n\t\t\t},\n\t\t\tid: id\n\t\t};\n\n\t}\n\n\t/**\n\t * JSON-RPC v2+ event notification response\n\t * @return {Object} response\n\t*/\n\tevent(result, name) {\n\t\treturn {\n\t\t\tjsonrpc: jsonrpc,\n\t\t\tresult: result,\n\t\t\tevent: name,\n\t\t\tid: null\n\t\t};\n\t}\n\n\t/**\n\t * Publish event notification to all child iFrame windows\n\t * @param {String} name of event\n\t * @param {Object} result\n\t * @return {Undefined}\n\t*/\n\tpublish(name, result) {\n\t\tvar messages = ['publish: name: ' + name + ', result: ' + JSON.stringify(result)];\n\n\t\tfor (var i = 0; i < window.frames.length; i++) {\n\t\t\tvar frame = window.frames[i];\n\n\t\t\tframe.postMessage(this.event(result, name), '*');\n\t\t}\n\t\tmessages.push('(' + window.frames.length + ') post publish');\n\t\tthis.log(messages);\n\t}\n\n\t/**\n\t * Start the server (add postMessage event listener)\n\t * @return {Undefined}\n\t*/\n\tstart() {\n\t\twindow.addEventListener('message', (event) => this.messageHandler(event));\n\t}\n\n\t/**\n\t * Stop the server (remove postMessage event listener)\n\t * @return {Undefined}\n\t*/\n\tstop() {\n\t\twindow.removeEventListener('message', (event) => this.messageHandler(event));\n\t}\n\n\t/**\n\t * Map given parameters according to required\n\t * @param {Object|Array} given\n\t * @param {Array[Array]} required\n\t * @return {Array} params\n\t*/\n\tmapParams(given, required) {\n\t\tvar params = [];\n\t\tfor (var i = 0; i < required.length; i++) {\n\t\t\tvar p = required[i];\n\t\t\tif (Array.isArray(given)) {\n\t\t\t\tif (i < given.length) {\n\t\t\t\t\tparams.push(given[i]);\n\t\t\t\t}\n\t\t\t} else if (given !== null && typeof given === 'object') {\n\t\t\t\tif (p[0] in given) {\n\t\t\t\t\tparams.push(given[p[0]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn params;\n\t}\n\n\t/**\n\t * Handle postMessage events for parent window\n\t * @param {Object} event\n\t * @return {Undefined}\n\t*/\n\tmessageHandler(event) {\n\t\t// this.log([\n\t\t// \t'event origin' + event.origin,\n\t\t// \t'event data' + event.data,\n\t\t// \t'event source' + event.source,\n\t\t// \t'this origin' + this._origin\n\t\t// ]);\n\n\t\t// if (!event.origin || event.origin === this._origin) {\n\t\t\tvar request = event.data;\n\t\t\tvar messages = ['request: ' + JSON.stringify(request)];\n\n\t\t\tif (!this.isValid(request)) {\n\n\t\t\t\tmessages.push('post invalid');\n\t\t\t\tevent.source.postMessage(this.invalidRequestResponse(request), '*');\n\n\t\t\t} else if (!this.isMethodFound(request)) {\n\n\t\t\t\tmessages.push('post method not found');\n\t\t\t\tevent.source.postMessage(this.methodNotFoundResponse(request), '*');\n\n\t\t\t} else {\n\n\t\t\t\tvar rpc = this._registered[request.method];\n\t\t\t\tvar func = rpc.function;\n\t\t\t\tvar args = this.mapParams(request.params, rpc.params);\n\t\t\t\tif (args.length !== rpc.params.length) {\n\t\t\t\t\tmessages.push('post invalid params');\n\t\t\t\t\tevent.source.postMessage(this.invalidParamsResponse(request), '*');\n\t\t\t\t} else {\n\t\t\t\t\tmessages.push('call: ' + request.method + '(' + args.join(', ') + ')');\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar result = func(...args);\n\t\t\t\t\t\tmessages.push('return: ' + JSON.stringify(result));\n\t\t\t\t\t\tmessages.push('post success');\n\t\t\t\t\t\tevent.source.postMessage(this.success(result, request.id), '*');\n\t\t\t\t\t} catch(err) {\n\t\t\t\t\t\tmessages.push('error: name: ' + err.name + ', message: ' + err.message);\n\t\t\t\t\t\tmessages.push('post failure');\n\t\t\t\t\t\tevent.source.postMessage(this.failure(errorCode, err.name, err.message, request.id), '*');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t// }\n\t\tthis.log(messages);\n\n\t}\n\n\t/**\n\t * Enable/Disable console logging\n\t * @param {String} event\n\t * @param {Function} callback function to notify\n\t * @return {Undefined}\n\t*/\n\tlogging(enabled) {\n\t\tthis._logging = enabled;\n\t}\n\n\t/**\n\t * Log messages to console\n\t * @param {Array[String]} messages\n\t * @param {String} color\n\t * @return {Undefined}\n\t*/\n\tlog(messages, color = 'blue') {\n\t\tif (this._logging) {\n\t\t\tconsole.group(this._name);\n\t\t\tfor (var i = 0; i < messages.length; i++) {\n\t\t\t\tconsole.log('%c%s', 'color:' + color, messages[i]);\n\t\t\t}\n\t\t\tconsole.groupEnd();\n\t\t}\n\t}\n\n\t/**\n\t * Log all registered RPC's\n\t * @return {Array[Object]} rpcs\n\t */\n\tlogRegistered(color = 'blue') {\n\t\tif (this._logging) {\n\t\t\tconsole.group(this._name);\n\t\t\tconsole.group('registered');\n\n\t\t\tvar self = this;\n\t\t\tvar arr = Object.keys(self._registered).map(function (key) {\n\t\t\t\treturn [key, self._registered[key]];\n\t\t\t});\n\t\t\tvar sorted = arr.sort(function (a, b) {\n\t\t\t\tif (a[0] < b[0]) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a[0] > b[0]) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t\tfor (var i = 0; i < sorted.length; i++) {\n\n\t\t\t\tvar messages = [];\n\t\t\t\tvar method = sorted[i][0];\n\t\t\t\tvar r = sorted[i][1];\n\t\t\t\tvar params = [];\n\t\t\t\tvar params2 = [];\n\n\t\t\t\tmessages.push('/**');\n\t\t\t\tmessages.push(' * ' + r.description);\n\t\t\t\tvar types = {\n\t\t\t\t\t'Boolean': 'true',\n\t\t\t\t\t'Null': 'null',\n\t\t\t\t\t'Undefined': 'undefined',\n\t\t\t\t\t'Number': '1',\n\t\t\t\t\t'String': 'str',\n\t\t\t\t\t'Object': '{a: 1}',\n\t\t\t\t\t'Array': '[1,2]'\n\t\t\t\t};\n\n\t\t\t\tfor (var j = 0; j < r.params.length; j++) {\n\t\t\t\t\tvar p = r.params[j];\n\t\t\t\t\tmessages.push(' * @param {' + p[1] + '} ' + p[0]);\n\t\t\t\t\tparams.push(p[0]);\n\t\t\t\t\tparams2.push(p[0] + ': ' + types[p[1]]);\n\t\t\t\t}\n\n\t\t\t\tmessages.push(' * @return {' + r.return + '}');\n\t\t\t\tmessages.push(' */');\n\t\t\t\tmessages.push(method + '(' + params.join(', ') + ')');\n\t\t\t\tmessages.push('client.call(\\'' + method + '\\', {' + params2.join(', ') + '}, func)');\n\n\t\t\t\tconsole.groupCollapsed(method);\n\t\t\t\tfor (var k = 0; k < messages.length; k++) {\n\t\t\t\t\tconsole.log('%c%s', 'color:' + color, messages[k]);\n\t\t\t\t}\n\t\t\t\tconsole.groupEnd();\n\t\t\t}\n\n\t\t\tconsole.groupEnd();\n\t\t\tconsole.groupEnd();\n\t\t}\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/server.js"],"sourceRoot":""}